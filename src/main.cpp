#include <iostream>

#include "mlp.hpp"
#include "activationfuncs.hpp"
#include "errorfuncs.hpp"

int main() {
	std::vector<layerConfig_t> layers = {
		layerConfig_t{5, relu, reluDer},
		layerConfig_t{1, linear, linearDer}
	};
	MLP mlp(layers, MSELoss, MSEDeriv);
	std::vector<TrainingElement> data = {
		{{ -1.95967012, 0.19686124, -1.32818605, 0.2088636, -1.22084365, -1.05771093, 0.82254491, -0.01349722 }, 131.59826304},
		{{ -0.29900735, -1.98756891, 0.09176078, 0.08704707, 0.8219025, 1.56464366, -2.6197451, -0.03582604 }, 40.81573871},
		{{ -1.91328024, -0.56228753, -1.72491783, 0.24196227, -0.46572975, 0.54256004, -0.46341769, -0.46947439 }, 151.19708364},
		{{ -0.23413696, 0.76743473, 1.57921282, -0.23415337, 1.52302986, -0.1382643, 0.64768854, 0.49671415 }, 235.17224935},
		{{ -0.18565898, -1.19620662, -1.10633497, -0.47917424, 0.97554513, -0.30921238, 0.33126343, -0.83921752 }, 60.63298013},
		{{ -0.71984421, 1.05712223, -0.46063877, -1.47852199, -0.3011037, 0.17136828, -0.11564828, 0.73846658 }, 9.09186123},
		{{ 0.61167629, 0.93128012, 1.03099952, -0.676922, -0.38508228, -1.76304016, 0.32408397, 0.34361829 }, 4.84569323},
		{{ -0.2257763, -1.42474819, 0.0675282, 1.46564877, -1.4123037, 0.31424733, -0.90802408, -1.01283112 }, 217.80508272},
		{{ -0.64511975, 1.53803657, 0.36139561, 0.36163603, 1.0035329, 1.35624003, -0.07201012, 0.81252582 }, 218.60284489}
	};
	mlp.fit(data, 50); //  20.198432
	std::vector<double> pred ={ -0.29169375, 1.85227818, -0.60170661, -0.60063869, 0.37569802, 0.11092259, -1.15099358, -0.54438272
};
	auto result = mlp.predict(pred);
	return 0;
}


